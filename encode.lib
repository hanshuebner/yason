#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "YASON"))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |YASON|::|*JSON-OUTPUT*|))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 '#(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|PLIST-HASH-TABLE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|YASON|::|PLIST| |COMMON-LISP|::|&REST| |YASON|::|HASH-TABLE-INITARGS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |YASON|::|*CHAR-REPLACEMENTS*|))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-KEY/VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|YASON|::|KEY| |YASON|::|VALUE| |COMMON-LISP|::|STREAM|)))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-SYMBOL/VALUE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|SYMBOL| |YASON|::|VALUE| |COMMON-LISP|::|STREAM|)))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-ALIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|YASON|::|OBJECT| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*STANDARD-OUTPUT*|))))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-PLIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|YASON|::|OBJECT| |COMMON-LISP|::|&OPTIONAL|
    (|COMMON-LISP|::|STREAM| |COMMON-LISP|::|*STANDARD-OUTPUT*|))))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE|
 #(1. 1. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|COMMON-LISP|::|LET*| ((#1=#:|G16041| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|YASON|::|JSON-OUTPUT-STREAM| :|DIRECT-SUPERCLASSES| (|COMMON-LISP|::|LIST|)
  :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|
   (|COMMON-LISP|::|LIST| :|NAME| '|YASON|::|OUTPUT-STREAM| :|READERS|
    '(|YASON|::|OUTPUT-STREAM|) :|INITARGS| '(:|OUTPUT-STREAM|))
   (|COMMON-LISP|::|LIST| :|NAME| '|YASON|::|STACK| :|READERS|
    '(|YASON|::|STACK|) :|WRITERS| '((|COMMON-LISP|::|SETF| |YASON|::|STACK|))
    :|INITFORM| '|COMMON-LISP|::|NIL| :|INITFUNCTION|
    (|SYSTEM|::|MAKE-CONSTANT-INITFUNCTION| |COMMON-LISP|::|NIL|)))
  :|METACLASS| #1# :|DOCUMENTATION|
  '"Objects of this class capture the state of a JSON stream encoder."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|YASON|::|OUTPUT-STREAM|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|STACK|
 #(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '(|COMMON-LISP|::|SETF| |YASON|::|STACK|)
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|NEXT-AGGREGATE-ELEMENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '|COMMON-LISP|::|NIL|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|YASON|::|WITH-OUTPUT|)
(|SYSTEM|::|%PUTD| '|YASON|::|WITH-OUTPUT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |YASON|::|WITH-OUTPUT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Set up a JSON streaming encoder context on STREAM, then evaluate BODY."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16074| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16075|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|YASON|::|WITH-OUTPUT| #1# '#4=(|COMMON-LISP|::|STREAM|))
         #1#))
       (|COMMON-LISP|::|STREAM| (|COMMON-LISP|::|CAR| #3#))
       (|YASON|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |YASON|::|WITH-OUTPUT|
       `(|COMMON-LISP|::|LET|
         ((|YASON|::|*JSON-OUTPUT*|
           (|CLOS|::|MAKE-INSTANCE| '|YASON|::|JSON-OUTPUT-STREAM|
            :|OUTPUT-STREAM| ,|COMMON-LISP|::|STREAM|)))
         ,@|YASON|::|BODY|))))))
  '(#4# |COMMON-LISP|::|&BODY| |YASON|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|YASON|::|WITH-OUTPUT-TO-STRING*|)
(|SYSTEM|::|%PUTD| '|YASON|::|WITH-OUTPUT-TO-STRING*|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |YASON|::|WITH-OUTPUT-TO-STRING*|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Set up a JSON streaming encoder context, then evaluate BODY.\n
Return a string with the generated JSON output."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16088| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (|YASON|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|WHEN| #1#
       (|SYSTEM|::|MACRO-NONNULL-ELEMENT-ERROR| |SYSTEM|::|<MACRO-FORM>|
        '|YASON|::|WITH-OUTPUT-TO-STRING*| #1#))
      (|COMMON-LISP|::|BLOCK| |YASON|::|WITH-OUTPUT-TO-STRING*|
       `(|COMMON-LISP|::|WITH-OUTPUT-TO-STRING| (|YASON|::|S|)
         (|YASON|::|WITH-OUTPUT| (|YASON|::|S|) ,@|YASON|::|BODY|)))))))
  '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|&BODY| |YASON|::|BODY|)))
(|COMMON-LISP|::|LET*| ((#1=#:|G16100| |CLOS|::|<STANDARD-CLASS>|))
 (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-CLASS|
  '|YASON|::|NO-JSON-OUTPUT-CONTEXT| :|DIRECT-SUPERCLASSES|
  (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|ERROR|) :|DIRECT-SLOTS|
  (|COMMON-LISP|::|LIST|) :|METACLASS| #1# :|DOCUMENTATION|
  '"This condition is signalled when one of the stream\n
  encoding function is used outside the dynamic context of a\n
  WITH-OUTPUT or WITH-OUTPUT-TO-STRING* body."
  (|COMMON-LISP|::|APPEND| '(:|FIXED-SLOT-LOCATIONS| |COMMON-LISP|::|NIL|)
   (|COMMON-LISP|::|LIST| :|DIRECT-DEFAULT-INITARGS| |COMMON-LISP|::|NIL|
    :|GENERIC-ACCESSORS| '|COMMON-LISP|::|T|))))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PRINT-OBJECT|
 #(2. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
   |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|YASON|::|WITH-AGGREGATE|)
(|SYSTEM|::|%PUTD| '|YASON|::|WITH-AGGREGATE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |YASON|::|WITH-AGGREGATE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16138| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16139|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|YASON|::|WITH-AGGREGATE| #1#
          '#4=(|YASON|::|BEGIN-CHAR| |YASON|::|END-CHAR|))
         #1#))
       (|YASON|::|BEGIN-CHAR| (|COMMON-LISP|::|CAR| #3#))
       (|YASON|::|END-CHAR| (|COMMON-LISP|::|CADR| #3#))
       (|YASON|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |YASON|::|WITH-AGGREGATE|
       `(|COMMON-LISP|::|PROGN|
         (|COMMON-LISP|::|UNLESS|
          (|COMMON-LISP|::|BOUNDP| '|YASON|::|*JSON-OUTPUT*|)
          (|COMMON-LISP|::|ERROR| '|YASON|::|NO-JSON-OUTPUT-CONTEXT|))
         (|COMMON-LISP|::|WHEN| (|YASON|::|STACK| |YASON|::|*JSON-OUTPUT*|)
          (|YASON|::|NEXT-AGGREGATE-ELEMENT|))
         (|COMMON-LISP|::|WRITE-CHAR| ,|YASON|::|BEGIN-CHAR|
          (|YASON|::|OUTPUT-STREAM| |YASON|::|*JSON-OUTPUT*|))
         (|COMMON-LISP|::|PUSH| |COMMON-LISP|::|NIL|
          (|YASON|::|STACK| |YASON|::|*JSON-OUTPUT*|))
         (|COMMON-LISP|::|PROG1| (|COMMON-LISP|::|PROGN| ,@|YASON|::|BODY|)
          (|COMMON-LISP|::|POP| (|YASON|::|STACK| |YASON|::|*JSON-OUTPUT*|))
          (|COMMON-LISP|::|WRITE-CHAR| ,|YASON|::|END-CHAR|
           (|YASON|::|OUTPUT-STREAM| |YASON|::|*JSON-OUTPUT*|)))))))))
  '(#4# |COMMON-LISP|::|&BODY| |YASON|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|YASON|::|WITH-ARRAY|)
(|SYSTEM|::|%PUTD| '|YASON|::|WITH-ARRAY|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |YASON|::|WITH-ARRAY|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Open a JSON array, then run BODY.  Inside the body,\n
ENCODE-ARRAY-ELEMENT must be called to encode elements to the opened\n
array.  Must be called within an existing JSON encoder context, see\n
WITH-OUTPUT and WITH-OUTPUT-TO-STRING*."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16152| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (|YASON|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|WHEN| #1#
       (|SYSTEM|::|MACRO-NONNULL-ELEMENT-ERROR| |SYSTEM|::|<MACRO-FORM>|
        '|YASON|::|WITH-ARRAY| #1#))
      (|COMMON-LISP|::|BLOCK| |YASON|::|WITH-ARRAY|
       `(|YASON|::|WITH-AGGREGATE| (#\[ #\]) ,@|YASON|::|BODY|))))))
  '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|&BODY| |YASON|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|YASON|::|WITH-OBJECT|)
(|SYSTEM|::|%PUTD| '|YASON|::|WITH-OBJECT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |YASON|::|WITH-OBJECT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Open a JSON object, then run BODY.  Inside the body,\n
ENCODE-OBJECT-ELEMENT or WITH-OBJECT-ELEMENT must be called to encode\n
elements to the object.  Must be called within an existing JSON\n
encoder context, see WITH-OUTPUT and WITH-OUTPUT-TO-STRING*."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16164| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (|YASON|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|WHEN| #1#
       (|SYSTEM|::|MACRO-NONNULL-ELEMENT-ERROR| |SYSTEM|::|<MACRO-FORM>|
        '|YASON|::|WITH-OBJECT| #1#))
      (|COMMON-LISP|::|BLOCK| |YASON|::|WITH-OBJECT|
       `(|YASON|::|WITH-AGGREGATE| (#\{ #\}) ,@|YASON|::|BODY|))))))
  '(|COMMON-LISP|::|NIL| |COMMON-LISP|::|&BODY| |YASON|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-ARRAY-ELEMENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|YASON|::|OBJECT|)))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-ARRAY-ELEMENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |YASON|::|OBJECTS|)))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-OBJECT-ELEMENT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|YASON|::|KEY| |YASON|::|VALUE|)))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-OBJECT-ELEMENTS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |YASON|::|ELEMENTS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|YASON|::|WITH-OBJECT-ELEMENT|)
(|SYSTEM|::|%PUTD| '|YASON|::|WITH-OBJECT-ELEMENT|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |YASON|::|WITH-OBJECT-ELEMENT|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Open a new encoding context to encode a JSON object element.  KEY\n
  is the key of the element.  The value will be whatever BODY\n
  serializes to the current JSON output context using one of the\n
  stream encoding functions.  This can be used to stream out nested\n
  object structures."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2. 2.
       |COMMON-LISP|::|T|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G16216| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G16217|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|LIST-LENGTH-IN-BOUNDS-P| #1# 1. 1. |COMMON-LISP|::|NIL|))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|YASON|::|WITH-OBJECT-ELEMENT| #1# '#4=(|YASON|::|KEY|))
         #1#))
       (|YASON|::|KEY| (|COMMON-LISP|::|CAR| #3#))
       (|YASON|::|BODY| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |YASON|::|WITH-OBJECT-ELEMENT|
       `(|COMMON-LISP|::|PROGN| (|YASON|::|NEXT-AGGREGATE-ELEMENT|)
         (|YASON|::|ENCODE| ,|YASON|::|KEY|
          (|YASON|::|OUTPUT-STREAM| |YASON|::|*JSON-OUTPUT*|))
         (|COMMON-LISP|::|SETF|
          (|COMMON-LISP|::|CAR| (|YASON|::|STACK| |YASON|::|*JSON-OUTPUT*|))
          #\:)
         (|COMMON-LISP|::|UNWIND-PROTECT|
          (|COMMON-LISP|::|PROGN| ,@|YASON|::|BODY|)
          (|COMMON-LISP|::|SETF|
           (|COMMON-LISP|::|CAR| (|YASON|::|STACK| |YASON|::|*JSON-OUTPUT*|))
           #\,))))))))
  '(#4# |COMMON-LISP|::|&BODY| |YASON|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-SLOTS|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|ENCODE-OBJECT|
 '#(1. 0. |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL| |COMMON-LISP|::|NIL|
    |COMMON-LISP|::|NIL|)
 |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|C-DEFUN| '|YASON|::|PPRINT-JSON|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|YASON|::|S| |COMMON-LISP|::|&OPTIONAL| (|YASON|::|I| 0.))))
